# Create the directory structure
mkdir -p Android-ReverseShell/app/src/main/java/com/example/reverseshell
mkdir -p Android-ReverseShell/app/src/main/res/layout
mkdir -p Android-ReverseShell/app/src/main/res/values

# Create Java files with basic content
cat > Android-ReverseShell/app/src/main/java/com/example/reverseshell/MainActivity.java << 'EOF'
package com.example.reverseshell;

import android.content.Intent;
import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private EditText etHost, etPort;
    private Button btnStart, btnStop;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        etHost = findViewById(R.id.etHost);
        etPort = findViewById(R.id.etPort);
        btnStart = findViewById(R.id.btnStart);
        btnStop = findViewById(R.id.btnStop);
        
        btnStart.setOnClickListener(v -> startReverseShell());
        btnStop.setOnClickListener(v -> stopReverseShell());
    }

    private void startReverseShell() {
        String host = etHost.getText().toString().trim();
        String portStr = etPort.getText().toString().trim();
        
        if (host.isEmpty() || portStr.isEmpty()) {
            Toast.makeText(this, "Please enter host and port", Toast.LENGTH_SHORT).show();
            return;
        }
        
        try {
            int port = Integer.parseInt(portStr);
            Intent serviceIntent = new Intent(this, ReverseShellService.class);
            serviceIntent.putExtra("host", host);
            serviceIntent.putExtra("port", port);
            startService(serviceIntent);
            Toast.makeText(this, "Reverse shell started", Toast.LENGTH_SHORT).show();
        } catch (NumberFormatException e) {
            Toast.makeText(this, "Invalid port number", Toast.LENGTH_SHORT).show();
        }
    }

    private void stopReverseShell() {
        Intent serviceIntent = new Intent(this, ReverseShellService.class);
        stopService(serviceIntent);
        Toast.makeText(this, "Reverse shell stopped", Toast.LENGTH_SHORT).show();
    }
}
EOF

cat > Android-ReverseShell/app/src/main/java/com/example/reverseshell/ReverseShellService.java << 'EOF'
package com.example.reverseshell;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;

public class ReverseShellService extends Service {
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
    
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return START_STICKY;
    }
}
EOF

cat > Android-ReverseShell/app/src/main/java/com/example/reverseshell/ConnectionManager.java << 'EOF'
package com.example.reverseshell;

public class ConnectionManager {
    public void startReverseShell(String host, int port) {
        // Reverse shell implementation
    }
    
    public void stop() {
        // Cleanup implementation
    }
}
EOF

cat > Android-ReverseShell/app/src/main/java/com/example/reverseshell/Utils.java << 'EOF'
package com.example.reverseshell;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

public class Utils {
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();
    }
}
EOF

# Create layout file
cat > Android-ReverseShell/app/src/main/res/layout/activity_main.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Network Diagnostic Tool"
        android:textSize="18sp"
        android:textStyle="bold"
        android:layout_marginBottom="20dp"/>

    <EditText
        android:id="@+id/etHost"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter server IP"
        android:inputType="text"
        android:layout_marginBottom="10dp"/>

    <EditText
        android:id="@+id/etPort"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter port"
        android:inputType="number"
        android:text="443"
        android:layout_marginBottom="20dp"/>

    <Button
        android:id="@+id/btnStart"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Start Test"
        android:layout_marginBottom="10dp"/>

    <Button
        android:id="@+id/btnStop"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Stop Test"/>

</LinearLayout>
EOF

# Create strings.xml
cat > Android-ReverseShell/app/src/main/res/values/strings.xml << 'EOF'
<resources>
    <string name="app_name">Network Diagnostics</string>
</resources>
EOF

# Create AndroidManifest.xml
cat > Android-ReverseShell/app/src/main/AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.reverseshell">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.AppCompat.Light">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service android:name=".ReverseShellService" />

    </application>

</manifest>
EOF

# Create app build.gradle
cat > Android-ReverseShell/app/build.gradle << 'EOF'
plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.reverseshell"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
}
EOF

# Create project build.gradle
cat > Android-ReverseShell/build.gradle << 'EOF'
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.4"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
EOF

# Create settings.gradle
cat > Android-ReverseShell/settings.gradle << 'EOF'
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}
rootProject.name = "ReverseShell"
include ':app'
EOF
