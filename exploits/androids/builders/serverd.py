import socket
import threading
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

AES_KEY = "A1B2C3D4E5F6G7H8".encode('utf-8')
AES_IV = "H8G7F6E5D4C3B2A1".encode('utf-8')

HOST = '0.0.0.0'
PORT = 4444

def encrypt(msg):
    cipher = AES.new(AES_KEY, AES.MODE_CBC, AES_IV)
    padded = pad(msg.encode('utf-8'), 16)
    enc = cipher.encrypt(padded)
    return base64.b64encode(enc).decode('utf-8')

def decrypt(enc):
    try:
        cipher = AES.new(AES_KEY, AES.MODE_CBC, AES_IV)
        decoded = base64.b64decode(enc)
        decrypted = cipher.decrypt(decoded)
        return unpad(decrypted, 16).decode('utf-8')
    except:
        return f"[Could not decrypt: {enc}]"

def debug_listener():
    """Simple debug listener that shows raw traffic"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen(1)
        print(f"[*] Debug listener on {HOST}:{PORT}")
        
        conn, addr = s.accept()
        print(f"[+] Connection from {addr}")
        
        while True:
            try:
                # Read raw data
                data = conn.recv(4096).decode('utf-8')
                if not data:
                    break
                
                print(f"[RAW RECEIVED]: {data.strip()}")
                
                # Try to decrypt each line
                for line in data.split('\n'):
                    line = line.strip()
                    if line:
                        decrypted = decrypt(line)
                        print(f"[DECRYPTED]: {decrypted}")
                        
            except Exception as e:
                print(f"[ERROR]: {e}")
                break
        
        conn.close()

def main():
    # Start debug listener first to see what's happening
    debug_listener()

if __name__ == "__main__":
    main()
