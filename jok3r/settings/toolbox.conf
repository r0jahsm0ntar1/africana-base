#
# toolbox.conf:
# -------------
# For each tool registered inside toolbox:
#   [tool_name]
#   name           = name to display (mandatory)
#   description    = short text describing the tool (mandatory)
#   target_service = targeted service or "multi" (mandatory)
#   install        = installation command-line (optional)
#   update         = update command-line (optional)
#   check_command  = command to run to check for correct install (usually run tool without args) (optional)
#                    Make sure that this command returns exit code 0 (success) when there is no problem
#					 To test: run command, then echo $?. It appears that some tools actually returns an 
#					 error exit code, even when no problem has occured... (e.g. hydra -h -> 255)
# 					
#

#########################################################################################
# Multi
#########################################################################################
[changeme]
name           = changeme
description    = Default credentials scanner
target_service = multi
virtualenv     = python3
install        = git clone https://github.com/ztgrace/changeme.git . && sudo apt-get update && sudo apt-get install -y unixodbc unixodbc-dev && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 changeme.py -h

[exploitdb]
name           = exploitdb
description    = Exploit Database repository
target_service = multi
install        = git clone https://github.com/offensive-security/exploitdb.git .
update         = git pull

[impacket]
name           = impacket
description    = Collection of Python classes for working with network protocols
target_service = multi
virtualenv     = python3
install        = git clone https://github.com/SecureAuthCorp/impacket.git . && pip3 install . && python3 setup.py install
update         = git pull && pip3 install . && python3 setup.py install
check_command  = python3 examples/smbexec.py -h

[jexboss]
name           = jexboss
description    = Exploitation tool for JBoss, Jenkins, Struts2, JMX (Tomcat)
target_service = multi
virtualenv     = python2.7
install        = git clone https://github.com/joaomatosf/jexboss.git . && pip2 install -r requires.txt; wget -k https://raw.githubusercontent.com/koutto/jok3r-scripts/master/java-rmi/run-jexboss-jmxtomcat.sh -O run-jexboss-jmxtomcat.sh && chmod +x run-jexboss-jmxtomcat.sh
update         = git pull && pip2 install -r requires.txt; wget -k https://raw.githubusercontent.com/koutto/jok3r-scripts/master/java-rmi/run-jexboss-jmxtomcat.sh -O run-jexboss-jmxtomcat.sh && chmod +x run-jexboss-jmxtomcat.sh
check_command  = python2.7 jexboss.py -h

[jok3r-scripts]
name           = jok3r-scripts
description    = Various standalone scripts
target_service = multi
install        = git clone https://github.com/koutto/jok3r-scripts.git .
update         = git pull

[jok3r-pocs]
name           = jok3r-pocs
description    = Compilation of standalone POCs/exploits from various sources with runner
target_service = multi
install        = git clone https://github.com/koutto/jok3r-pocs.git . && ./install.sh
update         = git pull && ./install.sh
check_command  = python3 pocexec.py -l
# TODO: virtualenv management directly inside jok3r-pocs project because use py2 & py3

[metasploit]
name           = metasploit
description    = Metasploit framework
target_service = multi
install        = sudo apt-get update && sudo apt-get install -y metasploit-framework
update         = sudo apt-get update && sudo apt-get install -y --only-upgrade metasploit-framework
check_command  = sudo msfconsole -v

[nmap]
name           = nmap
description    = Nmap port scanner
target_service = multi
install        = sudo apt-get update && sudo apt-get install -y nmap
update         = sudo apt-get update && sudo apt-get install -y --only-upgrade nmap
check_command  = nmap -V

# [patator]
# name           = patator
# description    = Multi-purpose brute-forcer, with a modular design and a flexible usage
# target_service = multi
# install        = git clone https://github.com/lanjelot/patator.git .
# update         = git pull
# check_command  = python2.7 patator.py -h 

[hydra]
name           = hydra
description    = Multi-purpose brute-forcer
target_service = multi
install        = sudo apt-get update && sudo apt-get install -y hydra
update         = sudo apt-get update && sudo apt-get install -y --only-upgrade hydra
check_command  = hydra -h; hydra -U http-get

[testssl]
name           = testssl
description    = TLS/SSL encryption checker
target_service = multi
install        = git clone https://github.com/drwetter/testssl.sh.git .
update         = git pull
check_command  = ./testssl.sh

[tls-prober]
name           = tls-prober
description    = Tool to fingerprint SSL/TLS servers 
target_service = multi
virtualenv     = python2.7
install        = git clone https://github.com/WestpointLtd/tls_prober.git . && git submodule update --init
update         = git pull
check_command  = python2.7 prober.py -h

# [vuln-databases]
# name           = vuln-databases
# description    = Vulnerabilities databases from Vulners.com, vuldb.com (NSE scripts) and exploit-db.com
# target_service = multi
# install        = git clone https://github.com/vulnersCom/nmap-vulners.git; git clone https://github.com/scipag/vulscan.git; cd vulscan; rm -f scipvuldb.csv; wget http://www.computec.ch/projekte/vulscan/download/scipvuldb.csv; cd ..; NMAP_PATH=$(dirname `locate http-enum.nse`); if [ ! -z "$NMAP_PATH" ]; then sudo cp -R vulscan $NMAP_PATH; fi; git clone https://github.com/offensive-security/exploit-database.git;
# update         = cd nmap-vulners; git pull; cd ..; cd vulscan; git pull; rm -f scipvuldb.csv; wget http://www.computec.ch/projekte/vulscan/download/scipvuldb.csv; NMAP_PATH=$(dirname `locate http-enum.nse`); if [ ! -z "$NMAP_PATH" ]; then sudo cp -R vulscan $NMAP_PATH; fi; cd ..; cd exploit-database; git pull;

[vulners-lookup]
name           = vulners-lookup
description    = Perform vulnerabilities lookup on Vulners.com, largest vuln & exploits database (requires API key)
target_service = multi
virtualenv     = python3
install        = git clone https://github.com/koutto/vulners-lookup.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 vulners-lookup.py -h

[cvedetails-lookup]
name           = cvedetails-lookup
description    = Perform vulnerabilities looukp on Cvedetails.com
target_service = multi
virtualenv     = python3
install        = git clone https://github.com/koutto/cvedetails-lookup.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 cvedetails-lookup.py -h

[ysoserial]
name           = ysoserial
description    = Tool for generating payloads that exploit unsafe Java object deserialization
target_service = multi
install        = wget -k https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar -O ysoserial-master.jar; wget -k https://raw.githubusercontent.com/koutto/jok3r-scripts/master/multi/run-ysoserial.sh -O run-ysoserial.sh && chmod +x run-ysoserial.sh
update         = rm ysoserial-master.jar; wget -k https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar -O ysoserial-master.jar; rm run-ysoserial.sh; wget -k https://raw.githubusercontent.com/koutto/jok3r-scripts/master/multi/run-ysoserial.sh -O run-ysoserial.sh && chmod +x run-ysoserial.sh
#check_command  = java -jar ysoserial-master.jar
check_command  = java -jar ysoserial-master.jar; java -jar ysoserial-master.jar BeanShell1 'test'


#########################################################################################
# AJP
#########################################################################################
[ajpy]
name           = ajpy
description    = AJP requests crafter in order to communicate with AJP connectors
target_service = ajp
virtualenv     = python2.7
install        = git clone https://github.com/hypn0s/AJPy.git . && python2.7 setup.py install && pip2 install colorlog
update         = git pull && python2.7 setup.py install
check_command  = python2.7 tomcat.py -h

#########################################################################################
# FTP
#########################################################################################
[ftpmap]
name           = ftpmap
description    = FTP Scanner detecting vulns based on softs/versions
target_service = ftp
install        = git clone https://github.com/ovpn-to/ftpmap.git . && chmod +x configure && ./configure && autoreconf -f -i && make && sudo make install && wget -k https://raw.githubusercontent.com/offensive-security/exploitdb/master/files_exploits.csv -O ./db/files.csv && grep --color=never "FTP\|FTPD\|FTPd\|ftp\|ftpd" ./db/files.csv | awk -F , '{print $1","$3}' > ./db/ftp-exploit-db && rm ./db/files.csv
update         = git pull && chmod +x configure && ./configure && autoreconf -f -i && make && sudo make install && wget -k https://raw.githubusercontent.com/offensive-security/exploitdb/master/files_exploits.csv -O ./db/files.csv && grep --color=never "FTP\|FTPD\|FTPd\|ftp\|ftpd" ./db/files.csv | awk -F , '{print $1","$3}' > ./db/ftp-exploit-db && rm ./db/files.csv
check_command  = ftpmap -h

[lftp]
name           = lftp
description    = Command line driven, shell-like, file transfer program
target_service = ftp
install        = sudo apt-get update && sudo apt-get install -y lftp
update         = sudo apt-get update && sudo apt-get install -y --only-upgrade lftp
check_command  = lftp -h


#########################################################################################
# HTTP
#########################################################################################
[halberd]
name           = halberd
description    = HTTP load balancer detector
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/jmbr/halberd.git . && python2.7 setup.py install
update         = git pull && python2.7 setup.py install
check_command  = ./build/scripts-2.7/halberd -h

[cloudmare]
name           = cloudmare
description    = CloudFlare real IP catcher
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/MrH0wl/Cloudmare.git . && pip2 install argparse beautifulsoup colorama cssselect dnsdumpster functools32 html_similarity parsel requests urllib3 w3lib
update         = git pull
check_command  = python2.7 Cloudmare.py -v

[wafw00f]
name           = wafw00f
description    = Identify and fingerprint WAF products protecting a website
target_service = http
virtualenv     = python3
install        = git clone https://github.com/EnableSecurity/wafw00f . && python3 setup.py install
update         = git pull && python3 setup.py install
check_command  = ./build/scripts-3*/wafw00f -h

[identywaf]
name           = identywaf
description    = Blind WAF identification tool 
target_service = http
virtualenv     = python3
install        = git clone https://github.com/stamparm/identYwaf.git .
update         = git pull
check_command  = python3 identYwaf.py -h

[whatweb]
name           = whatweb
description    = Identify CMS, blogging platforms, JS libraries, Web servers
target_service = http
virtualenv     = ruby-2.4
#install        = git clone https://github.com/urbanadventurer/WhatWeb.git . && rvm ruby-2.4 do sudo gem install bundler && rvm ruby-2.4 do bundle install && rvm ruby-2.4 do bundle update
install        = git clone https://github.com/urbanadventurer/WhatWeb.git . && gem install bundler && bundle install && bundle update
update         = git pull && gem install bundler && bundle install && bundle update
check_command  = ruby -v; ruby ./whatweb -h
# whatweb bugs with ruby2.5+ (no output) cf. https://github.com/urbanadventurer/WhatWeb/issues/244

[optionsbleed]
name           = optionsbleed
description    = Test for the Optionsbleed bug in Apache httpd (CVE-2017-9798)
target_service = http
install        = git clone https://github.com/hannob/optionsbleed.git . && chmod +x optionsbleed
update         = git pull && chmod +x optionsbleed
check_command  = ./optionsbleed -h

[clusterd]
name           = clusterd
description    = Application server attack toolkit (JBoss, ColdFusion, Weblogic, Tomcat, Railo, Axis2, Glassfish)
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/koutto/clusterd.git . && pip2 install -r requirements.txt
update         = git pull && pip2 install -r requirements.txt
check_command  = python2.7 ./clusterd.py -h

[wig]
name           = wig
description    = Identify several CMS and other administrative applications
target_service = http
virtualenv     = python3
install        = git clone https://github.com/jekyc/wig.git . && python3 setup.py install
update         = git pull && python3 setup.py install
check_command  = python3 ./wig.py -h

[fingerprinter]
name           = fingerprinter
description    = CMS/LMS/Library versions fingerprinter
target_service = http
virtualenv     = ruby-2.6
install        = git clone https://github.com/erwanlr/Fingerprinter.git . && gem install bundler && bundle install && ruby fingerprinter.rb --update-all --update
update         = git pull && bundle install && ruby fingerprinter.rb --update-all --update
check_command  = ruby fingerprinter.rb -h

[nikto]
name           = nikto
description    = Web server scanner
target_service = http
install        = git clone https://github.com/sullo/nikto.git .
update         = git pull
check_command  = cd program; perl ./nikto.pl -h

[h2t]
name     	   = h2t
description    = HTTP headers checker
target_service = http
virtualenv     = python3
install        = git clone https://github.com/gildasio/h2t.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 h2t.py -h

[iis-shortname-scanner]
name           = iis-shortname-scanner
description    = Scanner for IIS short filename (8.3) disclosure vulnerability
target_service = http
install        = git clone https://github.com/irsdl/IIS-ShortName-Scanner.git .
update         = git pull
check_command  = java -jar iis_shortname_scanner.jar

[davscan]
name           = davscan
description    = Fingerprint servers, finds exploits, scans WebDAV
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/Graph-X/davscan.git .
update         = git pull
check_command  = python2.7 ./davscan.py -h

[shocker]
name           = shocker
description    = Detect and exploit web servers vulnerable to Shellshock (CVE-2014-6271)
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/nccgroup/shocker.git .
update         = git pull
check_command  = python2.7 ./shocker.py -h

[jndiat]
name           = jndiat
description    = JNDI attacking tool through Weblogic T3(s) protocol
target_service = http
install        = echo https://github.com`curl -k https://github.com/quentinhardy/jndiat/releases | grep -i --color=never .jar | grep href | head -n 1 | cut -d'"' -f 2` > /tmp/jndiat.txt; wget $(cat /tmp/jndiat.txt) -O jndiat.jar; rm /tmp/jndiat.txt
update         = rm jndiat.jar; echo https://github.com`curl -k https://github.com/quentinhardy/jndiat/releases | grep -i --color=never .jar | grep href | head -n 1 | cut -d'"' -f 2` > /tmp/jndiat.txt; wget $(cat /tmp/jndiat.txt) -O jndiat.jar; rm /tmp/jndiat.txt
check_command  = java -jar jndiat.jar --version

[exploit-weblogic-cve2017-3248]
name           = exploit-weblogic-cve2017-3248
description    = Exploit for Weblogic RMI Registry UnicastRef Object Java Deserialization RCE (CVE-2017-3248)
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/quentinhardy/scriptsAndExploits.git .
update         = git pull
check_command  = python2.7 exploits/weblogic/exploit-CVE-2017-3248-bobsecq.py -h

[struts-pwn-cve2017-9805]
name           = struts-pwn-cve2017-9805
description    = Exploit for Apache Struts2 REST Plugin XStream RCE (CVE-2017-9805)
target_service = http
virtualenv     = python3
install        = git clone https://github.com/mazen160/struts-pwn_CVE-2017-9805.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 struts-pwn.py -h

[struts-pwn-cve2018-11776]
name           = struts-pwn-cve2018-11776
description    = Exploit for Apache Struts2 RCE CVE-2018-11776
target_service = http
virtualenv     = python3
install        = git clone https://github.com/mazen160/struts-pwn_CVE-2018-11776.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 struts-pwn.py -h 

[jqshell]
name           = jqshell
description    = Exploit arbitrary file upload in jQuery File Upload widget <= 9.22 (CVE-2018-9206)
target_service = http
virtualenv     = python3
install        = git clone https://github.com/gunnerstahl/JQShell.git . && pip3 install requests pysocks stem
update         = git pull
check_command  = python3 jqshell.py -h

[domiowned]
name           = domiowned
description    = Fingerprint/Exploit IBM/Lotus Domino servers
target_service = http
virtualenv     = python3
install        = git clone https://github.com/coldfusion39/domi-owned.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 domi-owned.py -h

[cmsmap]
name           = cmsmap
description    = Vulnerability scanner for CMS Wordpress, Drupal, Joomla (requires exploitdb repo)
target_service = http
virtualenv     = python3
install        = git clone https://github.com/Dionach/CMSmap.git . && sed -i 's/edbpath/#edbpath/' ./cmsmap/cmsmap.conf && echo "edbpath = [TOOLBOXDIR]/multi/exploitdb/" >> ./cmsmap/cmsmap.conf
update         = git pull && python3 cmsmap.py --update PC
check_command  = python3 cmsmap.py -h; python3 cmsmap.py -h | grep 'usage:'

[cmseek]
name           = cmseek
description    = Detect and bruteforce CMS
target_service = http
virtualenv     = python3
install        = git clone https://github.com/Tuhinshubhra/CMSeeK.git .
update         = python3 cmseek.py --update
check_command  = python3 cmseek.py -h

[drupwn]
name           = drupwn
description    = Fingerprint Drupal 7/8 and exploit CVE
target_service = http
virtualenv     = python3
install        = git clone https://github.com/immunIT/drupwn.git . && pip3 install -r requirements.txt 
# && sudo pip3 install -U prompt-toolkit==1.0.15
# problem with last prompt-toolkit lib https://github.com/immunIT/drupwn/issues/12
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 drupwn -h 

[dirhunt]
name           = dirhunt
description    = Find web directories without bruteforce
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/Nekmo/dirhunt.git . && pip2 install dirhunt && pip2 install --upgrade colorama
update         = git pull && pip2 install dirhunt && pip2 install --upgrade colorama
check_command  = dirhunt --help

[photon]
name           = photon
description    = Fast we crawler that extracts urls, emails, files, website accounts, etc.
target_service = http
virtualenv     = python3
install        = git clone https://github.com/s0md3v/Photon.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 photon.py -h

[web-brutator]
name           = web-brutator
description    = Web interfaces bruteforcer
target_service = http
virtualenv     = python3
install        = git clone https://github.com/koutto/web-brutator.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 web-brutator.py -h

[angularjs-csti-scanner]
name           = angularjs-csti-scanner
description    = Angular Client-Side Template Injection scanner
target_service = http
virtualenv     = python3
install        = git clone https://github.com/tijme/angularjs-csti-scanner.git . && pip3 install -r requirements.txt && python3 setup.py install
update         = git pull && pip3 install -r requirements.txt && python3 setup.py install
check_command  = python3 acstis.py -h

[wpforce]
name           = wpforce
description    = Wordpress attack suite
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/n00py/WPForce.git .
update         = git pull
check_command  = python2.7 yertle.py -h

[wpscan]
name           = wpscan
description    = Wordpress vulnerability scanner
target_service = http
virtualenv     = ruby-2.6
install        = git clone https://github.com/wpscanteam/wpscan.git . && gem install bundler && bundle install && rake install && wpscan --update
update         = gem update wpscan && wpscan --update
check_command  = wpscan -h

[wpseku]
name           = wpseku
description    = Wordpress vulnerability scanner
target_service = http
virtualenv     = python3
install        = git clone https://github.com/m4ll0k/WPSeku.git . && pip3 install -r requirements.txt
update         = git pull && pip3 install -r requirements.txt
check_command  = python3 wpseku.py

[joomscan]
name           = joomscan
description    = Joomla vulnerability scanner by OWASP
target_service = http
install        = git clone https://github.com/rezasp/joomscan.git . && perl joomscan.pl --update
update         = git pull && perl joomscan.pl --update
check_command  = perl joomscan.pl -v

[joomlascan]
name           = joomlascan
description    = Joomla vulnerability scanner
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/drego85/JoomlaScan.git .
update         = git pull
check_command  = python2.7 joomlascan.py -h; python2.7 joomlascan.py -h | grep 'usage:'

[joomlavs]
name           = joomlavs
description    = Joomla vulnerability scanner
target_service = http
virtualenv     = ruby-2.6
install        = git clone https://github.com/rastating/joomlavs.git . && gem install bundler && bundle install
update         = git pull && gem install bundler && bundle install
check_command  = ruby joomlavs.rb

[droopescan]
name           = droopescan
description    = Drupal & Silverstripe plugin-based vulnerability scanner
target_service = http
virtualenv     = python2.7
install        = git clone https://github.com/droope/droopescan.git . && pip2 install -r requirements.txt
update         = git pull && pip2 install -r requirements.txt
check_command  = python2.7 ./droopescan --help

[magescan]
name           = magescan
description    = Magento CMS scanner for information and misconfigurations
target_service = http
install        = echo https://github.com`curl -k https://github.com/steverobbins/magescan/releases | grep -i --color=never magescan.phar | grep href | head -n 1 | cut -d'"' -f 2` > /tmp/magescan.txt; wget $(cat /tmp/magescan.txt) -O magescan.phar; rm /tmp/magescan.txt
update         = rm magescan.phar; echo https://github.com`curl -k https://github.com/steverobbins/magescan/releases | grep -i --color=never magescan.phar | grep href | head -n 1 | cut -d'"' -f 2` > /tmp/magescan.txt; wget $(cat /tmp/magescan.txt) -O magescan.phar; rm /tmp/magescan.txt
check_command  = php magescan.phar

[vbscan]
name           = vbscan
description    = vBulletin vulnerability scanner by OWASP
target_service = http
install        = git clone https://github.com/rezasp/vbscan.git .
update         = git pull
check_command  = yes | perl vbscan.pl test

[liferayscan]
name           = liferayscan
description    = Liferay vulnerability scanner
target_service = http
virtualenv     = ruby-2.6
install        = git clone https://github.com/bcoles/LiferayScan.git . && ./install && gem install LiferayScan*.gem && gem install LiferayScan*.gem
update         = git pull && ./install && gem install LiferayScan*.gem && gem install LiferayScan*.gem
check_command  = LiferayScan -h

[vulnx]
name           = vulnx
description    = Vulnerability scanner & exploiter for CMS Joomla, Wordpress, Prestashop
target_service = http
virtualenv     = python3
install        = git clone https://github.com/anouarbensaad/vulnx.git . && ./install.sh 
update         = git pull && ./install.sh
check_command  = vulnx -h

[xbruteforcer]
name           = xbruteforcer
description    = CMS bruteforce tool
target_service = http
install        = git clone https://github.com/Moham3dRiahi/XBruteForcer.git .
update         = git pull
check_command  = perl XBruteForcer.pl

[dirsearch]
name           = dirsearch
description    = Web path scanner
target_service = http
virtualenv     = python3
install        = git clone https://github.com/maurosoria/dirsearch.git .
update         = git pull
check_command  = python3 dirsearch.py -h

[wfuzz]
name           = wfuzz
description    = Web application fuzzer
target_service = http
virtualenv     = python3
install        = git clone https://github.com/xmendez/wfuzz.git . && python3 setup.py install && pip3 install pycurl && pip2 install pycurl
update         = git pull && python3 setup.py install && pip3 install pycurl && pip2 install pycurl
check_command  = ./wfuzz -h


#########################################################################################
# JAVA-RMI
#########################################################################################
[barmie]
name           = barmie
description    = Java RMI enumeration and attack tool
target_service = java-rmi
install        = echo https://github.com`curl -k https://github.com/NickstaDB/BaRMIe/releases | grep -i --color=never .jar | grep href | head -n 1 | cut -d'"' -f 2` > /tmp/barmie.txt; wget $(cat /tmp/barmie.txt) -O BaRMIe.jar; rm /tmp/barmie.txt
update         = rm BaRMIe.jar; echo https://github.com`curl -k https://github.com/NickstaDB/BaRMIe/releases | grep -i --color=never .jar | grep href | head -n 1 | cut -d'"' -f 2` > /tmp/barmie.txt; wget $(cat /tmp/barmie.txt) -O BaRMIe.jar; rm /tmp/barmie.txt
check_command  = java -jar BaRMIe.jar

[jmxbf]
name           = jmxbf
description    = Bruteforce program to test weak accounts configured to access a JMX Registry
target_service = java-rmi
install        = git clone https://github.com/nccgroup/jmxbf.git . && wget http://mirrors.standaloneinstaller.com/apache//commons/cli/binaries/commons-cli-1.4-bin.zip && unzip commons-cli-1.4-bin.zip && rm commons-cli-1.4-bin.zip
update         = git pull
#check_command  = java -cp 'jmxbf.jar:./commons-cli-1.4/*' jmxbf
check_command  = ls -alh  | grep jmxbf.jar && ls -alh | grep commons-cli-1.4

[jmxploit]
name           = jmxploit
description    = JMX (post-)exploitation tool in Tomcat environment
target_service = java-rmi
install        = git clone https://github.com/jmxploit/jmxploit.git .
update         = git pull
check_command  = java -jar jmxploit.jar --host test --port test --list

[sjet]
name           = sjet
description    = JMX exploitation tool for insecure configured JMX services
target_service = java-rmi
install        = git clone https://github.com/siberas/sjet.git .
update         = git pull
check_command  = jython sjet.py -h

[twiddle]
name           = twiddle
description    = CLI-based JMX client
target_service = java-rmi
install        = git clone https://github.com/swesource/twiddle-standalone.git .
update         = git pull
check_command  = ./bin/twiddle.sh -h


#########################################################################################
# JDWP
#########################################################################################
[jdwp-shellifier]
name           = jdwp-shellifier
description    = Exploitation tool to gain RCE on JDWP
target_service = jdwp
virtualenv     = python2.7
install        = git clone https://github.com/IOActive/jdwp-shellifier.git .
update         = git pull
check_command  = python2.7 jdwp-shellifier.py -h


#########################################################################################
# MSSQL 
#########################################################################################
[msdat]
name           = msdat
description    = Microsoft SQL Database Attacking Tool
target_service = mssql
virtualenv     = python2.7
install        = git clone https://github.com/quentinhardy/msdat.git . && sudo apt-get update && sudo apt-get install -y freetds-dev && pip2 install cython colorlog termcolor pymssql argparse argcomplete && activate-global-python-argcomplete; sudo rm -f /etc/freetds/freetds.conf.bak; sudo cp /etc/freetds/freetds.conf /etc/freetds/freetds.conf.bak; sudo /bin/bash -c 'echo "[global]" > /etc/freetds/freetds.conf; echo "tds version = 8.0" >> /etc/freetds/freetds.conf; echo "use ntlmv2 = yes" >> /etc/freetds/freetds.conf';
update         = git pull
check_command  = python2.7 msdat.py -h  


#########################################################################################
# ORACLE
#########################################################################################
[odat]
name           = odat
description    = Oracle database attacking tool
target_service = oracle
install        = git clone https://github.com/quentinhardy/odat.git . && wget https://raw.githubusercontent.com/koutto/jok3r-scripts/master/oracle/odat-dependencies/install-odat.sh -O install-odat.sh && chmod +x install-odat.sh && ./install-odat.sh
update         = git pull
check_command  = python2.7 odat.py -h


#########################################################################################
# POSTGRESQL
#########################################################################################
[psql]
name           = psql
description    = Posgresql client
target_service = postgresql
install        = sudo apt-get update && sudo apt-get install postgresql-client
update         = sudo apt-get update && sudo apt-get install postgresql-client --upgrade
check_command  = psql --help


#########################################################################################
# RDP
#########################################################################################
[rdpscan]
name           = rdpscan
description    = Scanner for CVE-2019-0708 "BlueKeep" RCE vulnerability
target_service = rdp
install        = git clone https://github.com/robertdavidgraham/rdpscan.git . && sudo apt-get install -y libssl-dev build-essential && make
update         = git pull && make
check_command  = ./rdpscan -v; ./rdpscan 0.0.0.0


#########################################################################################
# SMB
#########################################################################################
# [enum4linux]
# name           = enum4linux
# description    = Enumeration tool for SMB on Windows and Samba hosts
# target_service = smb
# install        = git clone https://github.com/portcullislabs/enum4linux.git . && sudo apt-get install smbclient
# update         = git pull
# check_command  = perl enum4linux.pl

[nullinux]
name           = nullinux
description    = Enumeration tool for SMB on Windows
target_service = smb
install        = git clone https://github.com/m8r0wn/nullinux.git . && chmod +x setup.sh && sudo ./setup.sh
update         = git pull && chmod +x setup.sh && sudo ./setup.sh
check_command  = python3 nullinux.py -h

[smbmap]
name           = smbmap
description    = SMB Shares enumeration tool
target_service = smb
virtualenv     = python2.7
install        = git clone https://github.com/ShawnDEvans/smbmap.git . && pip2 install -r requirements.txt
update         = git pull && pip2 install -r requirements.txt
check_command  = python2.7 smbmap.py -h


#########################################################################################
# SMTP
#########################################################################################
[smtp-user-enum]
name           = smtp-user-enum
description    = Enumerate valid users on SMTP via EXPN, VRFY or RCPT TO
target_service = smtp
install        = git clone https://github.com/pentestmonkey/smtp-user-enum.git .
update         = git pull
check_command  = perl smtp-user-enum.pl -h


#########################################################################################
# SNMP
#########################################################################################
[snmpwn]
name           = snmpwn
description    = SNMPv3 User enumerator and Attack tool
target_service = snmp
virtualenv     = ruby-2.6
install        = git clone https://github.com/hatlord/snmpwn.git . && gem install bundler && bundle install
update         = git pull && gem install bundler && bundle install
check_command  = ruby snmpwn.rb --help

[snmp-check]
name           = snmp-check
description    = SNMP enumerator
target_service = snmp
virtualenv     = ruby-2.6
install        = wget http://www.nothink.org/codes/snmpcheck/snmpcheck-1.9.rb -O snmpcheck.rb; gem install snmp
check_command  = ruby snmpcheck.rb -h


#########################################################################################
# SSH
#########################################################################################
[ssh-user-enum-cve-2018-15473]
name           = ssh-user-enum-cve-2018-15473
description    = Exploit for OpenSSH <= 7.7 user enumeration
target_service = ssh
virtualenv     = python3
install        = git clone https://github.com/epi052/cve-2018-15473.git . && pip3 install -r requirements.txt && pip3 install paramiko --upgrade
update         = git pull && pip3 install -r requirements.txt && pip3 install paramiko --upgrade
check_command  = python3 ssh-username-enum.py -h

[libssh-scanner]
name           = libssh-scanner
description    = Exploit for authentication bypass (CVE-2018-10933) in libssh 0.6+ (fixed in 0.7.6 and 0.8.4)
target_service = ssh
virtualenv     = python2.7
install        = git clone https://github.com/leapsecurity/libssh-scanner.git . && pip2 install -r requirements.txt
update         = git pull && pip2 install -r requirements.txt
check_command  = python2.7 libsshscan.py -h

[osueta]
name           = osueta
description    = Exploit for OpenSSH (versions <= 7.2 and >= 5.*) user enumeration timing attack
target_service = ssh
virtualenv     = python2.7
install        = git clone https://github.com/c0r3dump3d/osueta.git . && sudo apt-get update && sudo apt-get install -y python-ipy python-nmap && pip2 install paramiko
update         = git pull
check_command  = python2.7 osueta.py -h

[ssh-audit]
name           = ssh-audit
description    = SSH server auditing tool (banner, key exchange, encryption, mac, compression, compatibility, security, etc)
target_service = ssh
virtualenv     = python2.7
install        = git clone https://github.com/arthepsy/ssh-audit.git .
update         = git pull
check_command  = python2.7 ssh-audit.py -h; python2.7 ssh-audit.py -h | grep 'usage:'


#########################################################################################
# TELNET
#########################################################################################
[grabtelnet]
name           = grabtelnet
description    = Full Telnet banner grabber
target_service = telnet
virtualenv     = python3
install        = git clone https://github.com/sububack/grabtelnet.git . && python3 setup.py install
update         = git pull && python3 setup.py install
check_command  = python3 grabtelnet -h